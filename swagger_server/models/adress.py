# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Adress(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, city: str=None, adress: str=None, postal_code: str=None):  # noqa: E501
        """Adress - a model defined in Swagger

        :param country: The country of this Adress.  # noqa: E501
        :type country: str
        :param city: The city of this Adress.  # noqa: E501
        :type city: str
        :param adress: The adress of this Adress.  # noqa: E501
        :type adress: str
        :param postal_code: The postal_code of this Adress.  # noqa: E501
        :type postal_code: str
        """
        self.swagger_types = {
            'country': str,
            'city': str,
            'adress': str,
            'postal_code': str
        }

        self.attribute_map = {
            'country': 'country',
            'city': 'city',
            'adress': 'adress',
            'postal_code': 'postal_code'
        }

        self._country = country
        self._city = city
        self._adress = adress
        self._postal_code = postal_code

    @classmethod
    def from_dict(cls, dikt) -> 'Adress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Adress of this Adress.  # noqa: E501
        :rtype: Adress
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self) -> str:
        """Gets the country of this Adress.


        :return: The country of this Adress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this Adress.


        :param country: The country of this Adress.
        :type country: str
        """

        self._country = country

    @property
    def city(self) -> str:
        """Gets the city of this Adress.


        :return: The city of this Adress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Adress.


        :param city: The city of this Adress.
        :type city: str
        """

        self._city = city

    @property
    def adress(self) -> str:
        """Gets the adress of this Adress.


        :return: The adress of this Adress.
        :rtype: str
        """
        return self._adress

    @adress.setter
    def adress(self, adress: str):
        """Sets the adress of this Adress.


        :param adress: The adress of this Adress.
        :type adress: str
        """

        self._adress = adress

    @property
    def postal_code(self) -> str:
        """Gets the postal_code of this Adress.


        :return: The postal_code of this Adress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code: str):
        """Sets the postal_code of this Adress.


        :param postal_code: The postal_code of this Adress.
        :type postal_code: str
        """

        self._postal_code = postal_code
