# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Customer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, country: str=None, city: str=None, adress: str=None, postal_code: str=None, phone: str=None, email: str=None, type: str=None):  # noqa: E501
        """Customer - a model defined in Swagger

        :param full_name: The full_name of this Customer.  # noqa: E501
        :type full_name: str
        :param country: The country of this Customer.  # noqa: E501
        :type country: str
        :param city: The city of this Customer.  # noqa: E501
        :type city: str
        :param adress: The adress of this Customer.  # noqa: E501
        :type adress: str
        :param postal_code: The postal_code of this Customer.  # noqa: E501
        :type postal_code: str
        :param phone: The phone of this Customer.  # noqa: E501
        :type phone: str
        :param email: The email of this Customer.  # noqa: E501
        :type email: str
        :param type: The type of this Customer.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'full_name': str,
            'country': str,
            'city': str,
            'adress': str,
            'postal_code': str,
            'phone': str,
            'email': str,
            'type': str
        }

        self.attribute_map = {
            'full_name': 'full_name',
            'country': 'country',
            'city': 'city',
            'adress': 'adress',
            'postal_code': 'postal_code',
            'phone': 'phone',
            'email': 'email',
            'type': 'type'
        }

        self._full_name = full_name
        self._country = country
        self._city = city
        self._adress = adress
        self._postal_code = postal_code
        self._phone = phone
        self._email = email
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Customer of this Customer.  # noqa: E501
        :rtype: Customer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self) -> str:
        """Gets the full_name of this Customer.


        :return: The full_name of this Customer.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name: str):
        """Sets the full_name of this Customer.


        :param full_name: The full_name of this Customer.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def country(self) -> str:
        """Gets the country of this Customer.


        :return: The country of this Customer.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this Customer.


        :param country: The country of this Customer.
        :type country: str
        """

        self._country = country

    @property
    def city(self) -> str:
        """Gets the city of this Customer.


        :return: The city of this Customer.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Customer.


        :param city: The city of this Customer.
        :type city: str
        """

        self._city = city

    @property
    def adress(self) -> str:
        """Gets the adress of this Customer.


        :return: The adress of this Customer.
        :rtype: str
        """
        return self._adress

    @adress.setter
    def adress(self, adress: str):
        """Sets the adress of this Customer.


        :param adress: The adress of this Customer.
        :type adress: str
        """

        self._adress = adress

    @property
    def postal_code(self) -> str:
        """Gets the postal_code of this Customer.


        :return: The postal_code of this Customer.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code: str):
        """Sets the postal_code of this Customer.


        :param postal_code: The postal_code of this Customer.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def phone(self) -> str:
        """Gets the phone of this Customer.


        :return: The phone of this Customer.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this Customer.


        :param phone: The phone of this Customer.
        :type phone: str
        """

        self._phone = phone

    @property
    def email(self) -> str:
        """Gets the email of this Customer.


        :return: The email of this Customer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Customer.


        :param email: The email of this Customer.
        :type email: str
        """

        self._email = email

    @property
    def type(self) -> str:
        """Gets the type of this Customer.


        :return: The type of this Customer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Customer.


        :param type: The type of this Customer.
        :type type: str
        """
        allowed_values = ["person", "organization"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
