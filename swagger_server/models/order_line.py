# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class OrderLine(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, quantity: int=None, quantity_unit: str=None, product_url: str=None, unit_price: int=None, tax_rate: int=None, total_amount: int=None, total_tax_amount: int=None):  # noqa: E501
        """OrderLine - a model defined in Swagger

        :param name: The name of this OrderLine.  # noqa: E501
        :type name: str
        :param quantity: The quantity of this OrderLine.  # noqa: E501
        :type quantity: int
        :param quantity_unit: The quantity_unit of this OrderLine.  # noqa: E501
        :type quantity_unit: str
        :param product_url: The product_url of this OrderLine.  # noqa: E501
        :type product_url: str
        :param unit_price: The unit_price of this OrderLine.  # noqa: E501
        :type unit_price: int
        :param tax_rate: The tax_rate of this OrderLine.  # noqa: E501
        :type tax_rate: int
        :param total_amount: The total_amount of this OrderLine.  # noqa: E501
        :type total_amount: int
        :param total_tax_amount: The total_tax_amount of this OrderLine.  # noqa: E501
        :type total_tax_amount: int
        """
        self.swagger_types = {
            'name': str,
            'quantity': int,
            'quantity_unit': str,
            'product_url': str,
            'unit_price': int,
            'tax_rate': int,
            'total_amount': int,
            'total_tax_amount': int
        }

        self.attribute_map = {
            'name': 'name',
            'quantity': 'quantity',
            'quantity_unit': 'quantity_unit',
            'product_url': 'product_url',
            'unit_price': 'unit_price',
            'tax_rate': 'tax_rate',
            'total_amount': 'total_amount',
            'total_tax_amount': 'total_tax_amount'
        }

        self._name = name
        self._quantity = quantity
        self._quantity_unit = quantity_unit
        self._product_url = product_url
        self._unit_price = unit_price
        self._tax_rate = tax_rate
        self._total_amount = total_amount
        self._total_tax_amount = total_tax_amount

    @classmethod
    def from_dict(cls, dikt) -> 'OrderLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order_line of this OrderLine.  # noqa: E501
        :rtype: OrderLine
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this OrderLine.

        Descriptive item name.  # noqa: E501

        :return: The name of this OrderLine.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this OrderLine.

        Descriptive item name.  # noqa: E501

        :param name: The name of this OrderLine.
        :type name: str
        """

        self._name = name

    @property
    def quantity(self) -> int:
        """Gets the quantity of this OrderLine.


        :return: The quantity of this OrderLine.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this OrderLine.


        :param quantity: The quantity of this OrderLine.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def quantity_unit(self) -> str:
        """Gets the quantity_unit of this OrderLine.

        Unit used to describe the quantity, e.g. kg, pcs... If defined has to be 1-8 characters  # noqa: E501

        :return: The quantity_unit of this OrderLine.
        :rtype: str
        """
        return self._quantity_unit

    @quantity_unit.setter
    def quantity_unit(self, quantity_unit: str):
        """Sets the quantity_unit of this OrderLine.

        Unit used to describe the quantity, e.g. kg, pcs... If defined has to be 1-8 characters  # noqa: E501

        :param quantity_unit: The quantity_unit of this OrderLine.
        :type quantity_unit: str
        """

        self._quantity_unit = quantity_unit

    @property
    def product_url(self) -> str:
        """Gets the product_url of this OrderLine.


        :return: The product_url of this OrderLine.
        :rtype: str
        """
        return self._product_url

    @product_url.setter
    def product_url(self, product_url: str):
        """Sets the product_url of this OrderLine.


        :param product_url: The product_url of this OrderLine.
        :type product_url: str
        """

        self._product_url = product_url

    @property
    def unit_price(self) -> int:
        """Gets the unit_price of this OrderLine.


        :return: The unit_price of this OrderLine.
        :rtype: int
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price: int):
        """Sets the unit_price of this OrderLine.


        :param unit_price: The unit_price of this OrderLine.
        :type unit_price: int
        """

        self._unit_price = unit_price

    @property
    def tax_rate(self) -> int:
        """Gets the tax_rate of this OrderLine.

        Non-negative. In percent, two implicit decimals. I.e 2500 = 25%. (max value 10000)  # noqa: E501

        :return: The tax_rate of this OrderLine.
        :rtype: int
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate: int):
        """Sets the tax_rate of this OrderLine.

        Non-negative. In percent, two implicit decimals. I.e 2500 = 25%. (max value 10000)  # noqa: E501

        :param tax_rate: The tax_rate of this OrderLine.
        :type tax_rate: int
        """

        self._tax_rate = tax_rate

    @property
    def total_amount(self) -> int:
        """Gets the total_amount of this OrderLine.


        :return: The total_amount of this OrderLine.
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount: int):
        """Sets the total_amount of this OrderLine.


        :param total_amount: The total_amount of this OrderLine.
        :type total_amount: int
        """

        self._total_amount = total_amount

    @property
    def total_tax_amount(self) -> int:
        """Gets the total_tax_amount of this OrderLine.


        :return: The total_tax_amount of this OrderLine.
        :rtype: int
        """
        return self._total_tax_amount

    @total_tax_amount.setter
    def total_tax_amount(self, total_tax_amount: int):
        """Sets the total_tax_amount of this OrderLine.


        :param total_tax_amount: The total_tax_amount of this OrderLine.
        :type total_tax_amount: int
        """

        self._total_tax_amount = total_tax_amount
